Main parts of MSAID. 
In the project, the symbolic execution codes are jpf-core and jpf-symbc. Note that these codes are different from the SPF on the website (http://javapathfinder.sourceforge.net/). The analyzed SDN applications (from some controller platforms e.g., Floodlight) running on SPF may invoke some abstracts of the classes in jdk in MJI. However, MJI doesn't consist of the abstraction of some methods in classes of jdk (e.g., class java.nio.ByteBuffer, java.lang.String.format and so on). We rewrite the corresponding codes to provide these methods based on the simplified implementation in jdk. These developments aim to make the symbolic execution engine use better. These developments are one-time offline task, and you can use the tool directly. For example, we added five methods in class java.nio.ByteBuffer. Some applications (e.g., firewall) in floodlight invoke these methods, which are absent in SPF, hence we added these corresponding methods. (https://github.com/lyh-jlu-thu/MSAID/blob/master/project/jpf-core/src/classes/java/nio/ByteBuffer.java). 
The identify codes are in indentitor. This detection engine then crosschecks the output messages, and then it outputs an interference report if interferences exist among these multiple applications.
The detailed of the introduction about the codes is coming. Http, XXX
The details are coming.
